"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import Link from "next/link"

interface FishStock {
  id: number
  fish_species_id: number
  pond_name: string
  quantity: number
  size_category: string
  average_weight: number
  stocking_date: string
  expected_harvest_date: string
  notes: string
  created_at: string
  fish_species: {
    id: number
    name_bn: string
    name_en: string
    scientific_name: string
    fish_categories: {
      name_bn: string
      name_en: string
    }
  }
}

interface FishSpecies {
  id: number
  name_bn: string
  name_en: string
  fish_categories: {
    name_bn: string
  }
}

export default function FishStockPage() {
  const [stock, setStock] = useState<FishStock[]>([])
  const [fishSpecies, setFishSpecies] = useState<FishSpecies[]>([])
  const [loading, setLoading] = useState(true)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [editingStock, setEditingStock] = useState<FishStock | null>(null)
  const [searchTerm, setSearchTerm] = useState("")

  const [formData, setFormData] = useState({
    fish_species_id: "",
    pond_name: "",
    quantity: "",
    size_category: "fry",
    average_weight: "",
    stocking_date: "",
    expected_harvest_date: "",
    notes: "",
  })

  // Fetch data
  useEffect(() => {
    Promise.all([fetch("/api/user/fish-stock"), fetch("/api/fish/species")])
      .then(([stockRes, speciesRes]) => Promise.all([stockRes.json(), speciesRes.json()]))
      .then(([stockData, speciesData]) => {
        setStock(stockData)
        setFishSpecies(speciesData)
        setLoading(false)
      })
      .catch((error) => {
        console.error("Error fetching data:", error)
        setLoading(false)
      })
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    const url = editingStock ? `/api/user/fish-stock/${editingStock.id}` : "/api/user/fish-stock"
    const method = editingStock ? "PUT" : "POST"

    try {
      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          ...formData,
          quantity: Number.parseInt(formData.quantity),
          average_weight: formData.average_weight ? Number.parseFloat(formData.average_weight) : null,
        }),
      })

      if (response.ok) {
        // Refresh data
        const stockRes = await fetch("/api/user/fish-stock")
        const stockData = await stockRes.json()
        setStock(stockData)

        // Reset form
        setFormData({
          fish_species_id: "",
          pond_name: "",
          quantity: "",
          size_category: "fry",
          average_weight: "",
          stocking_date: "",
          expected_harvest_date: "",
          notes: "",
        })
        setEditingStock(null)
        setIsDialogOpen(false)
      }
    } catch (error) {
      console.error("Error saving stock:", error)
    }
  }

  const handleEdit = (stockItem: FishStock) => {
    setEditingStock(stockItem)
    setFormData({
      fish_species_id: stockItem.fish_species_id.toString(),
      pond_name: stockItem.pond_name,
      quantity: stockItem.quantity.toString(),
      size_category: stockItem.size_category,
      average_weight: stockItem.average_weight?.toString() || "",
      stocking_date: stockItem.stocking_date || "",
      expected_harvest_date: stockItem.expected_harvest_date || "",
      notes: stockItem.notes || "",
    })
    setIsDialogOpen(true)
  }

  const handleDelete = async (id: number) => {
    if (confirm("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶á ‡¶∏‡ßç‡¶ü‡¶ï ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?")) {
      try {
        const response = await fetch(`/api/user/fish-stock/${id}`, { method: "DELETE" })
        if (response.ok) {
          setStock(stock.filter((item) => item.id !== id))
        }
      } catch (error) {
        console.error("Error deleting stock:", error)
      }
    }
  }

  const getSizeCategoryText = (category: string) => {
    switch (category) {
      case "fry":
        return "‡¶™‡ßã‡¶®‡¶æ"
      case "fingerling":
        return "‡¶Ü‡¶ô‡ßÅ‡¶≤ ‡¶Æ‡¶æ‡¶õ"
      case "juvenile":
        return "‡¶ï‡¶ø‡¶∂‡ßã‡¶∞"
      case "adult":
        return "‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï"
      default:
        return category
    }
  }

  const filteredStock = stock.filter(
    (item) =>
      item.fish_species.name_bn.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.pond_name.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  // Calculate totals
  const totalPonds = new Set(stock.map((item) => item.pond_name)).size
  const totalFish = stock.reduce((sum, item) => sum + item.quantity, 0)
  const totalSpecies = new Set(stock.map((item) => item.fish_species_id)).size

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Link href="/dashboard">
                <div className="h-8 w-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">üêü</span>
                </div>
              </Link>
              <h1 className="text-xl font-bold text-gray-900">‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï</h1>
            </div>
            <div className="flex items-center space-x-4">
              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                <DialogTrigger asChild>
                  <Button
                    onClick={() => {
                      setEditingStock(null)
                      setFormData({
                        fish_species_id: "",
                        pond_name: "",
                        quantity: "",
                        size_category: "fry",
                        average_weight: "",
                        stocking_date: "",
                        expected_harvest_date: "",
                        notes: "",
                      })
                    }}
                  >
                    ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>{editingStock ? "‡¶∏‡ßç‡¶ü‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®" : "‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"}</DialogTitle>
                    <DialogDescription>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶´‡¶∞‡ßç‡¶Æ‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</DialogDescription>
                  </DialogHeader>
                  <form onSubmit={handleSubmit} className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="species">‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ú‡¶æ‡¶§‡¶ø *</Label>
                        <Select
                          value={formData.fish_species_id}
                          onValueChange={(value) => setFormData({ ...formData, fish_species_id: value })}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="‡¶™‡ßç‡¶∞‡¶ú‡¶æ‡¶§‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                          </SelectTrigger>
                          <SelectContent>
                            {fishSpecies.map((species) => (
                              <SelectItem key={species.id} value={species.id.toString()}>
                                {species.name_bn}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="pond">‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ *</Label>
                        <Input
                          id="pond"
                          value={formData.pond_name}
                          onChange={(e) => setFormData({ ...formData, pond_name: e.target.value })}
                          placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞ ‡ßß"
                          required
                        />
                      </div>
                    </div>

                    <div className="grid md:grid-cols-3 gap-4">
                      <div>
                        <Label htmlFor="quantity">‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ *</Label>
                        <Input
                          id="quantity"
                          type="number"
                          value={formData.quantity}
                          onChange={(e) => setFormData({ ...formData, quantity: e.target.value })}
                          placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡ßß‡ß¶‡ß¶‡ß¶"
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="size">‡¶Ü‡¶ï‡¶æ‡¶∞</Label>
                        <Select
                          value={formData.size_category}
                          onValueChange={(value) => setFormData({ ...formData, size_category: value })}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="fry">‡¶™‡ßã‡¶®‡¶æ</SelectItem>
                            <SelectItem value="fingerling">‡¶Ü‡¶ô‡ßÅ‡¶≤ ‡¶Æ‡¶æ‡¶õ</SelectItem>
                            <SelectItem value="juvenile">‡¶ï‡¶ø‡¶∂‡ßã‡¶∞</SelectItem>
                            <SelectItem value="adult">‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="weight">‡¶ó‡¶°‡¶º ‡¶ì‡¶ú‡¶® (‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ)</Label>
                        <Input
                          id="weight"
                          type="number"
                          step="0.1"
                          value={formData.average_weight}
                          onChange={(e) => setFormData({ ...formData, average_weight: e.target.value })}
                          placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡ß´‡ß¶"
                        />
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="stocking">‡¶Æ‡¶ú‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</Label>
                        <Input
                          id="stocking"
                          type="date"
                          value={formData.stocking_date}
                          onChange={(e) => setFormData({ ...formData, stocking_date: e.target.value })}
                        />
                      </div>
                      <div>
                        <Label htmlFor="harvest">‡¶Ü‡¶π‡¶∞‡¶£‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</Label>
                        <Input
                          id="harvest"
                          type="date"
                          value={formData.expected_harvest_date}
                          onChange={(e) => setFormData({ ...formData, expected_harvest_date: e.target.value })}
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="notes">‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø</Label>
                      <Textarea
                        id="notes"
                        value={formData.notes}
                        onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                        placeholder="‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø..."
                      />
                    </div>

                    <div className="flex space-x-4">
                      <Button type="submit" className="flex-1">
                        {editingStock ? "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®" : "‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®"}
                      </Button>
                      <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>
                        ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
                      </Button>
                    </div>
                  </form>
                </DialogContent>
              </Dialog>
              <Link href="/dashboard">
                <Button variant="outline">‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°</Button>
              </Link>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          <div className="mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-2">‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ</h2>
            <p className="text-gray-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®</p>
          </div>

          {/* Summary Cards */}
          <div className="mb-8 grid md:grid-cols-4 gap-4">
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">‡¶Æ‡ßã‡¶ü ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-blue-600">{totalPonds}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">‡¶Æ‡ßã‡¶ü ‡¶Æ‡¶æ‡¶õ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">{totalFish.toLocaleString()}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">‡¶™‡ßç‡¶∞‡¶ú‡¶æ‡¶§‡¶ø</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-purple-600">{totalSpecies}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">‡¶∏‡ßç‡¶ü‡¶ï ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-orange-600">{stock.length}</div>
              </CardContent>
            </Card>
          </div>

          {/* Search */}
          <div className="mb-6">
            <Input
              placeholder="‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-md"
            />
          </div>

          {/* Stock List */}
          {filteredStock.length === 0 ? (
            <Card>
              <CardContent className="text-center py-8">
                <p className="text-gray-500 mb-4">‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§</p>
                <Button onClick={() => setIsDialogOpen(true)}>‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</Button>
              </CardContent>
            </Card>
          ) : (
            <div className="grid gap-4">
              {filteredStock.map((item) => (
                <Card key={item.id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-start space-x-4">
                          <div className="flex-1">
                            <h4 className="text-lg font-semibold text-gray-900">{item.fish_species.name_bn}</h4>
                            <p className="text-sm text-gray-600">{item.fish_species.name_en}</p>
                            <div className="flex items-center space-x-2 mt-2">
                              <Badge variant="secondary">{item.fish_species.fish_categories.name_bn}</Badge>
                              <Badge variant="outline">{getSizeCategoryText(item.size_category)}</Badge>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-2xl font-bold text-blue-600">{item.quantity.toLocaleString()}</div>
                            <p className="text-sm text-gray-500">‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶õ</p>
                            {item.average_weight && (
                              <p className="text-sm text-gray-500">‡¶ó‡¶°‡¶º ‡¶ì‡¶ú‡¶®: {item.average_weight}‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ</p>
                            )}
                          </div>
                        </div>
                        <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
                          <div className="flex items-center space-x-4">
                            <span>üèä ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞: {item.pond_name}</span>
                            {item.stocking_date && (
                              <span>üìÖ ‡¶Æ‡¶ú‡ßÅ‡¶¶: {new Date(item.stocking_date).toLocaleDateString("bn-BD")}</span>
                            )}
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button size="sm" variant="outline" onClick={() => handleEdit(item)}>
                              ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ
                            </Button>
                            <Button size="sm" variant="outline" onClick={() => handleDelete(item.id)}>
                              ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®
                            </Button>
                          </div>
                        </div>
                        {item.notes && <p className="mt-2 text-sm text-gray-600 italic">{item.notes}</p>}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
