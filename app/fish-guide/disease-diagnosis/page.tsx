"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import Link from "next/link"

interface Symptom {
  id: string
  name: string
  category: string
}

interface Disease {
  id: string
  name: string
  symptoms: string[]
  treatment: string
  prevention: string
  severity: "low" | "medium" | "high"
}

const symptoms: Symptom[] = [
  { id: "red_spots", name: "рж╢рж░рзАрж░рзЗ рж▓рж╛рж▓ ржжрж╛ржЧ", category: "external" },
  { id: "white_spots", name: "рж╕рж╛ржжрж╛ ржжрж╛ржЧ ржмрж╛ рждрзБрж▓рж╛рж░ ржорждрзЛ", category: "external" },
  { id: "fin_rot", name: "ржкрж╛ржЦржирж╛ ржкржЪрж╛", category: "external" },
  { id: "ulcers", name: "ржХрзНрж╖ржд ржмрж╛ ржШрж╛", category: "external" },
  { id: "swollen_eyes", name: "ржЪрзЛржЦ ржлрзЛрж▓рж╛", category: "external" },
  { id: "loss_appetite", name: "ржЦрж╛ржмрж╛рж░рзЗ ржЕржирзАрж╣рж╛", category: "behavioral" },
  { id: "abnormal_swimming", name: "ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж╕рж╛ржБрждрж╛рж░", category: "behavioral" },
  { id: "gasping", name: "ржкрж╛ржирж┐рж░ ржЙржкрж░рзЗ рж╣рж╛ржБржкрж╛ржирж┐", category: "behavioral" },
  { id: "lethargy", name: "ржирж┐рж╕рзНрждрзЗржЬрждрж╛", category: "behavioral" },
  { id: "isolation", name: "ржПржХрж╛ ржерж╛ржХрж╛рж░ ржкрзНрж░ржмржгрждрж╛", category: "behavioral" },
]

const diseases: Disease[] = [
  {
    id: "bacterial_infection",
    name: "ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ ржЗржиржлрзЗржХрж╢ржи",
    symptoms: ["red_spots", "fin_rot", "ulcers", "loss_appetite"],
    treatment: "ржЕрзНржпрж╛ржирзНржЯрж┐ржмрж╛ржпрж╝рзЛржЯрж┐ржХ (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи) рззрзж-рззрзл ржорж┐ржЧрзНрж░рж╛/рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ рзл-рзн ржжрж┐ржи ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржиред",
    prevention: "ржкрзБржХрзБрж░рзЗрж░ ржкрж╛ржирж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржи, ржЕрждрж┐рж░рж┐ржХрзНржд ржЦрж╛ржмрж╛рж░ ржжрзЗржмрзЗржи ржирж╛ред",
    severity: "high",
  },
  {
    id: "fungal_infection",
    name: "ржЫрждрзНрж░рж╛ржХ рж╕ржВржХрзНрж░ржоржг",
    symptoms: ["white_spots", "lethargy", "loss_appetite"],
    treatment: "ржкржЯрж╛рж╢рж┐ржпрж╝рж╛ржо ржкрж╛рж░ржорзНржпрж╛ржЩрзНржЧрж╛ржирзЗржЯ рзи-рзй ржорж┐ржЧрзНрж░рж╛/рж▓рж┐ржЯрж╛рж░ ржЕржержмрж╛ ржлрж░ржорж╛рж▓рж┐ржи рзирзл ржорж┐рж▓рж┐/рззрзжрзж рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржиред",
    prevention: "ржкрж╛ржирж┐рж░ рждрж╛ржкржорж╛рждрзНрж░рж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржи, ржЖрж╣ржд ржорж╛ржЫ ржЖрж▓рж╛ржжрж╛ ржХрж░рзБржиред",
    severity: "medium",
  },
  {
    id: "parasitic_infection",
    name: "ржкрж░ржЬрзАржмрзА ржЖржХрзНрж░ржоржг",
    symptoms: ["abnormal_swimming", "gasping", "isolation", "loss_appetite"],
    treatment: "рж▓ржмржг рж╕рзНржирж╛ржи (рзй% рж▓ржмржг ржкрж╛ржирж┐рждрзЗ рзл-рззрзж ржорж┐ржирж┐ржЯ) ржЕржержмрж╛ ржЯрзНрж░рж┐ржХрзНрж▓рзЛрж░ржлржи рзж.рзл ржорж┐ржЧрзНрж░рж╛/рж▓рж┐ржЯрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржиред",
    prevention: "ржирждрзБржи ржорж╛ржЫ ржХрзЛржпрж╝рж╛рж░рзЗржирзНржЯрж╛ржЗржи ржХрж░рзБржи, ржкрзБржХрзБрж░ ржирж┐ржпрж╝ржорж┐ржд ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржиред",
    severity: "medium",
  },
  {
    id: "oxygen_deficiency",
    name: "ржЕржХрзНрж╕рж┐ржЬрзЗржирзЗрж░ ржЕржнрж╛ржм",
    symptoms: ["gasping", "abnormal_swimming", "lethargy"],
    treatment: "ржкрж╛ржирж┐рждрзЗ ржмрж╛ржпрж╝рзБ рж╕рж░ржмрж░рж╛рж╣ ржмрж╛ржбрж╝рж╛ржи, ржЕрждрж┐рж░рж┐ржХрзНржд ржорж╛ржЫ рж╕рж░рж╛ржи, ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржиред",
    prevention: "ржкрзБржХрзБрж░рзЗ ржЕрждрж┐рж░рж┐ржХрзНржд ржорж╛ржЫ рж░рж╛ржЦржмрзЗржи ржирж╛, ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржиред",
    severity: "high",
  },
  {
    id: "eye_disease",
    name: "ржЪрзЛржЦрзЗрж░ рж░рзЛржЧ",
    symptoms: ["swollen_eyes", "loss_appetite", "abnormal_swimming"],
    treatment: "ржЯрзЗрж░рж╛ржорж╛ржЗрж╕рж┐ржи рззрзж ржорж┐ржЧрзНрж░рж╛/рж▓рж┐ржЯрж╛рж░ ржкрж╛ржирж┐рждрзЗ рзл ржжрж┐ржи ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржиред",
    prevention: "ржкрж╛ржирж┐рж░ ржЧрзБржгрж╛ржЧрзБржг ржнрж╛рж▓рзЛ рж░рж╛ржЦрзБржи, ржЖржШрж╛ржд ржПржбрж╝рж╛ржиред",
    severity: "low",
  },
]

export default function DiseaseDiagnosisPage() {
  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([])
  const [diagnosisResult, setDiagnosisResult] = useState<Disease[]>([])
  const [showResult, setShowResult] = useState(false)

  const handleSymptomChange = (symptomId: string, checked: boolean) => {
    if (checked) {
      setSelectedSymptoms([...selectedSymptoms, symptomId])
    } else {
      setSelectedSymptoms(selectedSymptoms.filter((id) => id !== symptomId))
    }
  }

  const diagnose = () => {
    if (selectedSymptoms.length === 0) {
      return
    }

    const possibleDiseases = diseases
      .map((disease) => {
        const matchingSymptoms = disease.symptoms.filter((symptom) => selectedSymptoms.includes(symptom))
        const matchPercentage = (matchingSymptoms.length / disease.symptoms.length) * 100
        return { ...disease, matchPercentage, matchingSymptoms: matchingSymptoms.length }
      })
      .filter((disease) => disease.matchingSymptoms > 0)
      .sort((a, b) => b.matchPercentage - a.matchPercentage)

    setDiagnosisResult(possibleDiseases)
    setShowResult(true)
  }

  const reset = () => {
    setSelectedSymptoms([])
    setDiagnosisResult([])
    setShowResult(false)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "bg-red-100 text-red-800"
      case "medium":
        return "bg-yellow-100 text-yellow-800"
      case "low":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case "high":
        return "ржЬрж░рзБрж░рж┐"
      case "medium":
        return "ржорж╛ржзрзНржпржо"
      case "low":
        return "рж╕рж╛ржзрж╛рж░ржг"
      default:
        return "ржЕржЬрж╛ржирж╛"
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Link href="/fish-guide">
                <div className="h-8 w-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">ЁЯПе</span>
                </div>
              </Link>
              <h1 className="text-xl font-bold text-gray-900">рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝</h1>
            </div>
            <Link href="/fish-guide">
              <Button variant="outline">ржЧрж╛ржЗржбрзЗ ржлрж┐рж░рзБржи</Button>
            </Link>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-2">ржорж╛ржЫрзЗрж░ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝</h2>
            <p className="text-gray-600">ржЖржкржирж╛рж░ ржорж╛ржЫрзЗрж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рзЛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред ржЖржорж░рж╛ рж╕ржорзНржнрж╛ржмрзНржп рж░рзЛржЧ ржУ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржмред</p>
          </div>

          {!showResult ? (
            <div className="space-y-6">
              {/* Symptom Selection */}
              <Card>
                <CardHeader>
                  <CardTitle>рж▓ржХрзНрж╖ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</CardTitle>
                  <CardDescription>ржЖржкржирж╛рж░ ржорж╛ржЫрзЗ ржпрзЗ рж▓ржХрзНрж╖ржгржЧрзБрж▓рзЛ ржжрзЗржЦржЫрзЗржи рж╕рзЗржЧрзБрж▓рзЛ ржЯрж┐ржХ ржжрж┐ржи</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {/* External Symptoms */}
                    <div>
                      <h4 className="font-semibold mb-3">ржмрж╛рж╣рзНржпрж┐ржХ рж▓ржХрзНрж╖ржг</h4>
                      <div className="grid md:grid-cols-2 gap-3">
                        {symptoms
                          .filter((symptom) => symptom.category === "external")
                          .map((symptom) => (
                            <div key={symptom.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={symptom.id}
                                checked={selectedSymptoms.includes(symptom.id)}
                                onCheckedChange={(checked) => handleSymptomChange(symptom.id, !!checked)}
                              />
                              <label htmlFor={symptom.id} className="text-sm cursor-pointer">
                                {symptom.name}
                              </label>
                            </div>
                          ))}
                      </div>
                    </div>

                    {/* Behavioral Symptoms */}
                    <div>
                      <h4 className="font-semibold mb-3">ржЖржЪрж░ржгржЧржд рж▓ржХрзНрж╖ржг</h4>
                      <div className="grid md:grid-cols-2 gap-3">
                        {symptoms
                          .filter((symptom) => symptom.category === "behavioral")
                          .map((symptom) => (
                            <div key={symptom.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={symptom.id}
                                checked={selectedSymptoms.includes(symptom.id)}
                                onCheckedChange={(checked) => handleSymptomChange(symptom.id, !!checked)}
                              />
                              <label htmlFor={symptom.id} className="text-sm cursor-pointer">
                                {symptom.name}
                              </label>
                            </div>
                          ))}
                      </div>
                    </div>
                  </div>

                  <div className="mt-6 flex space-x-4">
                    <Button onClick={diagnose} disabled={selectedSymptoms.length === 0}>
                      рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржХрж░рзБржи ({selectedSymptoms.length} ржЯрж┐ рж▓ржХрзНрж╖ржг)
                    </Button>
                    <Button variant="outline" onClick={reset}>
                      рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Diagnosis Results */}
              <div className="flex items-center justify-between">
                <h3 className="text-xl font-semibold">ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржлрж▓рж╛ржлрж▓</h3>
                <Button variant="outline" onClick={reset}>
                  ржирждрзБржи ржирж┐рж░рзНржгржпрж╝
                </Button>
              </div>

              {diagnosisResult.length === 0 ? (
                <Card>
                  <CardContent className="text-center py-8">
                    <p className="text-gray-500 mb-4">ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж▓ржХрзНрж╖ржгрзЗрж░ рж╕рж╛ржерзЗ ржХрзЛржирзЛ рж░рзЛржЧ ржорж┐рж▓рзЗржирж┐ред</p>
                    <p className="text-sm text-gray-400 mb-4">
                      ржжржпрж╝рж╛ ржХрж░рзЗ ржЖрж░рзЛ рж▓ржХрзНрж╖ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ржЕржержмрж╛ рж╕рзНржерж╛ржирзАржпрж╝ ржорзОрж╕рзНржп ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
                    </p>
                    <Button onClick={reset}>ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи</Button>
                  </CardContent>
                </Card>
              ) : (
                <div className="space-y-4">
                  {diagnosisResult.map((disease, index) => (
                    <Card key={disease.id} className={index === 0 ? "border-blue-200 bg-blue-50" : ""}>
                      <CardHeader>
                        <div className="flex items-start justify-between">
                          <div>
                            <CardTitle className="flex items-center space-x-2">
                              <span>{disease.name}</span>
                              {index === 0 && <Badge variant="secondary">рж╕ржмржЪрзЗржпрж╝рзЗ рж╕ржорзНржнрж╛ржмрзНржп</Badge>}
                            </CardTitle>
                            <CardDescription>
                              {disease.matchPercentage.toFixed(0)}% рж▓ржХрзНрж╖ржг ржорж┐рж▓рзЗржЫрзЗ ({disease.matchingSymptoms}/
                              {disease.symptoms.length})
                            </CardDescription>
                          </div>
                          <Badge className={getSeverityColor(disease.severity)}>
                            {getSeverityText(disease.severity)}
                          </Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h5 className="font-semibold mb-2">ржЪрж┐ржХрж┐рзОрж╕рж╛:</h5>
                          <p className="text-sm text-gray-700">{disease.treatment}</p>
                        </div>
                        <div>
                          <h5 className="font-semibold mb-2">ржкрзНрж░рждрж┐рж░рзЛржз:</h5>
                          <p className="text-sm text-gray-700">{disease.prevention}</p>
                        </div>
                        {disease.severity === "high" && (
                          <Alert>
                            <AlertDescription>
                              ржПржЯрж┐ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрж░ рж░рзЛржЧред ржжрзНрж░рзБржд ржЪрж┐ржХрж┐рзОрж╕рж╛ ржирж╛ ржХрж░рж▓рзЗ ржорж╛ржЫ ржорж╛рж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред ржЕржмрж┐рж▓ржорзНржмрзЗ ржмрзНржпржмрж╕рзНржерж╛ ржирж┐ржиред
                            </AlertDescription>
                          </Alert>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}

              {/* General Advice */}
              <Card>
                <CardHeader>
                  <CardTitle>рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-700">
                    <li>рж░рзЛржЧрж╛ржХрзНрж░рж╛ржирзНржд ржорж╛ржЫ ржЕржмрж┐рж▓ржорзНржмрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░рзБржи</li>
                    <li>ржкрзБржХрзБрж░рзЗрж░ ржкрж╛ржирж┐рж░ ржЧрзБржгрж╛ржЧрзБржг ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи</li>
                    <li>ржЕрждрж┐рж░рж┐ржХрзНржд ржЦрж╛ржмрж╛рж░ ржжрзЗржУржпрж╝рж╛ ржмржирзНржз ржХрж░рзБржи</li>
                    <li>ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж╕рзНржерж╛ржирзАржпрж╝ ржорзОрж╕рзНржп ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи</li>
                    <li>ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ рж╕ржоржпрж╝ ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╣рж╛рж░ ржХржорж╛ржи</li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
